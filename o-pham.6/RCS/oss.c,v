head	1.7;
access;
symbols;
locks
	o-pham:1.7; strict;
comment	@ * @;


1.7
date	2016.04.29.21.03.53;	author o-pham;	state Exp;
branches;
next	1.6;

1.6
date	2016.04.29.05.12.59;	author o-pham;	state Exp;
branches;
next	1.5;

1.5
date	2016.04.29.00.17.35;	author o-pham;	state Exp;
branches;
next	1.4;

1.4
date	2016.04.28.04.56.56;	author o-pham;	state Exp;
branches;
next	1.3;

1.3
date	2016.04.27.03.22.09;	author o-pham;	state Exp;
branches;
next	1.2;

1.2
date	2016.04.23.21.29.09;	author o-pham;	state Exp;
branches;
next	1.1;

1.1
date	2016.04.22.02.03.59;	author o-pham;	state Exp;
branches;
next	;


desc
@initialize me structures and stuff
@


1.7
log
@done
@
text
@///////////////////////////////////////////////////
////////////////// OSS.C //////////////////////////
///////////////////////////////////////////////////

#include "header.h"

#include <stdio.h>
#include <sys/shm.h>
#include <sys/sem.h>
#include <stdlib.h>
#include <unistd.h>
#include <time.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <signal.h>
#include <sys/wait.h>
#include <errno.h>
#include <sys/resource.h>

s_m *shared_struct;

int main(void) {
	srand(time(NULL));
	int i, j;
	
	////// Set Up Shared Memory ///////////
	///////////////////////////////////////
    key_t shmkey;
    if ((shmkey = ftok("/classes/OS/o-pham/o-pham.6",100)) == (key_t)-1) {
        perror("ftok error");
        exit(1);
    }

    int shmID;
    s_m *sm;

    shmID = shmget(shmkey,sizeof(s_m),IPC_CREAT | 0666);
    if (shmID<0) {
        perror("shmget failed");
        exit(1);
    }

    sm = (s_m *)shmat(shmID,(void *)0,0);
    if (sm<(s_m *)(0)) {
        perror("shmat failed");
        exit(1);
    }

    shared_struct = sm;

    //////// Set Up Semaphore ///////////
    /////////////////////////////////////
	int semID;
    key_t semkey;
    if ((semkey = ftok("/classes/OS/o-pham/o-pham.6",101)) == (key_t) -1) {
        perror("ftok error");
        exit(1);
    }

    semID = semget(semkey,19,IPC_CREAT | 0666);
    if (semID<0) {
        perror("semget failed");
        exit(1);
    }

	//////// Initialize Semaphores ////////
	///////////////////////////////////////
	for(i=0;i<19;i++)
		seminit(semID,i,0);

	
	/////// Initialize Bit Vectors to 0s //////////
	///////////////////////////////////////////////
	for(i=0;i<256;i++) 
		clearBit(sm->bit_vector,i);		
		//setBit(sm->bit_vector,i);

/////// Bit Vector Debugg //////////////////
////////////////////////////////////////////	
/*
int bitCounter=0;
//bitCounter = testBit(sm->bit_vector,136);
//fprintf(stderr,"bitCOunter is %d\n", bitCounter);

for(i=0;i<256;i++) {
	bitCounter+=testBit(sm->bit_vector,i);
}
if(bitCounter == 0)
fprintf(stderr,"all bits are 0\n");

if(bitCounter == 256)
fprintf(stderr,"all bits are 1\n");

else if(bitCounter > 0 && bitCounter < 256)
fprintf(stderr,"some bits are 1 and some are 0\n");
//////////////////////////////////////////
//////////////////////////////////////////
*/

	/////////// Initialize the Memory Reference members //////
	//////////////////////////////////////////////////////////

	for(i=0; i<18; i++) {
		sm->p[i].page_delimit = 0;
		sm->p[i].page = 0;
		sm->p[i].referencing = NO;
		sm->p[i].action = 0;
		sm->p[i].mat_start = 0;
		sm->p[i].mat_stop = 0;
		sm->p[i].eat = 0;
		sm->p[i].num_of_ref = 0;
		for(j=0; j<32; j++) {
			sm->p[i].pg_t[j].action = 0;
			sm->p[i].pg_t[j].val_bit = 0;
			sm->p[i].pg_t[j].dirty_bit = 0;
			sm->p[i].pg_t[j].ref_counter = 0;
			sm->p[i].pg_t[j].old = NO;
		}
	}

	/////////// Set up the process index boolean array ///////
	//////////////////////////////////////////////////////////
	for(i=0; i<18; i++) {
		sm->taken[i] = NO;
	}

	///////// Start Logical Clock & Shared Mem //////////////
	/////////////////////////////////////////////////////////
	sm->lclock.sec = 0;
	sm->lclock.nan = 0;
	sm->process_running = 0;
	sm->process_num = 0;
	sm->pclock.page_counter = 0;

	////////// Signals /////////////
	////////////////////////////////
	signal(SIGCHLD, chi_exit);
	signal(SIGINT, exit_proc);

	///////// First Fork at Time 0 ///////////////
	//////////////////////////////////////////////
	pid_t pID, pgID;
	pgID = getpgrp();
	int index = 0;
	sleep(1); // so random gen work with child
	
	pID = fork();

	if(pID == -1) {
		perror("fork error");
		exit(1);
	}

	if(pID == 0) { // the child
		pgID = getpgrp();
		char pass_index[sizeof(index)];
		snprintf(pass_index,sizeof(index),"%d",index);
		execl("./process","./process",pass_index,NULL);
	}

	sm->taken[index] = YES;
	sm->process_running++;
	sm->process_num++;
	
/*	index = index_open(sm);
	if(index == -1) {
		fprintf(stderr,"Error No index left for new process process\n");
	}
*/
	////////////// Start of Simulation ////////////////
	///////////////////////////////////////////////////

	int addRand, rand_fork_time_s, rand_fork_time_n;
	int wait_to_fork = NO;
	int isEmpty;
	mr mem_r; //memory reference variable contains process/page/action
	

	for(;;) {

		if(wait_to_fork == NO) {
			addRand = rand_gen(1000,500000);
			rand_fork_time_s = sm->lclock.sec;
			rand_fork_time_n = sm->lclock.nan + addRand;
			if(rand_fork_time_n > 999999999) {
				rand_fork_time_s++;
				rand_fork_time_n = rand_fork_time_n - 999999999;
			}
			wait_to_fork = YES;
		}
		if(sm->lclock.sec >= rand_fork_time_s && sm->lclock.nan >= rand_fork_time_n &&wait_to_fork == YES) {
		//if (sm->rand_fork_time <= 0 && wait_to_fork == YES) {
			/* Limit fork process to 18 process */
			if (sm->process_running < 18) {
				index = index_open(sm);
				sleep(1);//so child process random generator work
				pID = fork();
				if(pID == -1) {
					perror("fork error");
					exit(1);
				}
				else if (pID == 0) { //the child
					pgID = getpgrp();
					char pass_index[sizeof(index)];
					snprintf(pass_index,sizeof(index),"%d",index);
					execl("./process","./process",pass_index,NULL);
				}

				sm->process_running+=1;//update the total # of process
				sm->process_num+=1;
				sm->taken[index] = YES;
				//index = index_open(sm);//picks free index in taken array for next fork

				/*if(index == -1) {
					fprintf(stderr,"Error No index left for new process\n");
				}*/

				wait_to_fork = NO;
			}	
		}


		///////////////////////////////////////////////////////////////
		/////// Go through process and and Look if the flag ///////////
		/////// for memory reference is ON				 	///////////
		///////////////////////////////////////////////////////////////
		
		for(i=0; i<18; i++) {
			int pg, actn;
			mr mem_r;
			if(sm->p[i].referencing == YES) { //if process is making a reference
				mem_r.page= sm->p[i].page;
				mem_r.action = sm->p[i].action;
				mem_r.process = i;
				
				sm->p[i].mat_stop = sm->lclock.nan_counter;
				sm->p[i].eat += ((sm->p[i].mat_stop - sm->p[i].mat_start)/sm->p[i].num_of_ref);
//fprintf(stderr,"eat %d\n",sm->p[i].eat);
				sm->pclock.page_counter++; //increment seperate logical clock just for LRU
				sm->p[i].pg_t[mem_r.page].ref_counter = sm->pclock.page_counter; //set the page counter for LRU

				if(sm->p[i].pg_t[mem_r.page].val_bit == 0 || mem_r.action == WRITE) {
					if(sm->p[i].pg_t[mem_r.page].old == YES) { //if the referencign page is old reset to not old
						sm->p[i].pg_t[mem_r.page].old = NO;
						sm->p[i].pg_t[mem_r.page].val_bit = 1; //turn valid bit back on
					}
					else
						addToDeviceQ(mem_r); //throw in device Q
				}

				else 
					sync_clock(10,sm); //page already in frame table.
			}

			sm->p[i].referencing == NO; //reset the referencing flag for that process
			semsignal(semID,i);	//then signal
		}

		/////////////////////////////////////////////////
		//////////////// Device Queue ///////////////////
		/////////////////////////////////////////////////
		while(isEmpty = isDeviceQEmpty() != YES) { //while the queue is not empty
			sync_clock(15000,sm); //Simulate Device time
			mr referencingP;
			referencingP = getReferencingP();
			int process_ref = referencingP.process;
			int page_addr_ref = referencingP.page;
			int page_action_ref = referencingP.action;

			run_daemon(sm);			


			//if the refernce is write and already in frame update dirty bit
			if(page_action_ref == WRITE && sm->p[process_ref].pg_t[page_addr_ref].val_bit == 1) 
				sm->p[process_ref].pg_t[page_addr_ref].dirty_bit = 1; // set the dirty bit
			

			else {

				int frame = free_frame(sm); //find the free frame
				if(frame == -1)  //when no free frame left
					fprintf(stderr,"Error there is no frame left\n");
				

				sm->p[process_ref].pg_t[page_addr_ref].frame_addr = frame;	//put the referencing process page into frame table
				sm->p[process_ref].pg_t[page_addr_ref].val_bit = 1;	//set the referencing proess valid/invalid bit to valid
				setBit(sm->bit_vector,frame);	//set the bitvector to mark the frame is in use

//fprintf(stderr,"Process: %d| Page: %d | Frame: %d\n",process_ref+1,page_addr_ref,frame);
	
			}
		}	
/*
		//////////semaphore debug//////////
		///////////////////////////////////		
		for(i=0; i<18; i++) {
			int ncnt;
			ncnt = semctl(semID, i, GETNCNT);
			//fprintf(stderr,"ncnt for sem %d is %d\n",i,ncnt);
		}
*/
/////////////////////////////////////////////////////////////////////
//////////////////////// Displaying Frame Table /////////////////////
/////////////////////////////////////////////////////////////////////
for(i=0; i<256; i++) {
	if(testBit(sm->bit_vector,i) == 1) {
		if(i==31 || i==63 || i==95 || i==127 || i==159 || i==191 || i==223)
			fprintf(stderr,"1\n");
		else if(i == 255)
			fprintf(stderr,"1\n\n");
		else
			fprintf(stderr,"1");
	}

	else {
		if(i==31 || i==63 || i==95 || i==127 || i==159 || i==191 || i==223)
			fprintf(stderr,".\n");
		else if(i == 255) 
			fprintf(stderr,".\n\n");
		else
			fprintf(stderr,".");
	}
}
		
		sync_clock(1,sm);
//fprintf(stderr,"%d\n",sm->lclock.nan_counter);
		if(sm->lclock.sec >= 3) //ends simulation after 3 seconds
			break;
	}//End of simulation

fprintf(stderr,"3 second up simulation done\n");
fprintf(stderr,"throughput is %d for 3 seconds\n",sm->throughput);
fprintf(stderr,"removing shared sems and memory\n");
	
	if(shmctl(shmID,IPC_RMID,NULL) == -1) {
        perror("failed to remove shared memory");
        exit(1);
    }

    if(semctl(semID,0,IPC_RMID) == -1) {
        perror("failed to remove semaphores");
        exit(1);
    }
    killpg(0,SIGKILL);

return 0;
}
@


1.6
log
@everythign works
@
text
@d100 1
a100 1
	/////////// Initialize the Memory Reference Array ////////
a101 6
	for(i=0; i<20; i++) {
		sm->reference[i].process = -1; //default 
		sm->reference[i].page = 0;
		sm->reference[i].action = 0;
	}

d108 4
d235 4
a238 1
			
d293 3
a295 2

/*semaphore debug		
d302 23
a324 1

d326 3
d331 14
a344 1

@


1.5
log
@*** empty log message ***
@
text
@d112 1
a112 1
		sm->p[i].requesting = NO;
d119 1
d226 2
a227 2
		/// Look Through Ref Array And Find the Process Page Table  ///
		/// If it is not in the Frame Queue the Request into Device ///
a229 60
/*	
fprintf(stderr,"%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|%d|\n",
sm->reference[0].process,
sm->reference[1].process,
sm->reference[2].process,
sm->reference[3].process,
sm->reference[4].process,
sm->reference[5].process,
sm->reference[6].process,
sm->reference[7].process,
sm->reference[8].process,
sm->reference[9].process,
sm->reference[10].process,
sm->reference[11].process,
sm->reference[12].process,
sm->reference[13].process,
sm->reference[14].process,
sm->reference[15].process,
sm->reference[16].process,
sm->reference[17].process,
sm->reference[18].process,
sm->reference[19].process);
*/	
/*
		for(i=0; i<20; i++) {
			int pr,pg,act;
			if(sm->reference[i].process != -1) {//if there is a process making reference
				mem_r.process = sm->reference[i].process;
				mem_r.page = sm->reference[i].page;
				mem_r.action = sm->reference[i].action;

				pr = mem_r.process;
				pg = mem_r.page;
				act = mem_r.action;

				
				//sm->p[pr].pg_t[pg].ref_counter = sm->pclock.page_counter; //set the counter for the page
				sm->pclock.page_counter++;	//increase the seperate shared memeorry page counter
				sm->p[pr].pg_t[pg].ref_counter = sm->pclock.page_counter; //set the counter for the page	

				sm->reference[i].process = -1; //reset to default
				sm->reference[i].page = 0;
				sm->reference[i].action = 0;

				if(sm->p[pr].pg_t[pg].val_bit == 0 || act == WRITE) {//if process page is not in frame **page fault
					addToDeviceQ(mem_r); //adds the process reference into the device
					//run daemon here

				}

				else {//page already in frame
					
					sync_clock(10,sm); //increment 10 nano to simulate disk read
					//fprintf(stderr,"process %d page %d already in frame oss signaling %d\n",pr+1,pg,pr+1);
					//semsignal(semID,pr);
				}
			semsignal(semID,pr);
			}
		}	
*/
d233 1
a233 1
			if(sm->p[i].requesting == YES) {
d238 2
a239 2
				sm->pclock.page_counter++;
				sm->p[i].pg_t[mem_r.page].ref_counter = sm->pclock.page_counter;
d241 8
a248 2
				if(sm->p[i].pg_t[mem_r.page].val_bit == 0 || mem_r.action == WRITE)
					addToDeviceQ(mem_r);
d251 1
a251 1
					sync_clock(10,sm);
d254 2
a255 2
			sm->p[i].requesting == NO;
			semsignal(semID,i);
d263 5
a267 5
			mr requestingP;
			requestingP = getRequestingP();
			int process_ref = requestingP.process;
			int page_addr_ref = requestingP.page;
			int page_action_ref = requestingP.action;
d269 1
a269 1
//			run_daemon(sm);			
d273 1
a273 1
			if(page_action_ref == WRITE && sm->p[process_ref].pg_t[page_addr_ref].val_bit == 1) {
d275 1
a275 3
				//fprintf(stderr,"signaling %d\n",process_ref);
				//semsignal(semID,process_ref);
			}
a278 1
				//run daemon here
d280 1
a280 1
				if(frame == -1) { //when no free frame left
d282 1
a282 2
					// run daemon here
				}
a289 3
				//fprintf(stderr,"put in frame signaling %d\n",requestingP);
				//fprintf(stderr,"signaling %d\n",process_ref);
				//semsignal(semID,process_ref); //signal the referencing process to run again
a290 1
			//semsignal(semID,process_ref);
d293 1
a293 1

d299 1
a299 1

@


1.4
log
@not sworking dameon
@
text
@d102 1
a102 1
	for(i=0; i<50; i++) {
d108 2
a109 3
/*
	for(i=0;i<18; i++) {
		sm->p[i].page_addr = 0;
d111 15
a125 2
		//for(j=0;j<31;j++) {
			//sm->p[p].pg_t[j]
a126 1
*/
d134 1
a134 1
	//sm->daemon_flag = DOWN;
d165 2
a166 1
	index = index_open(sm);
d170 1
a170 1

d174 1
a175 1
	int pr, pg, act; // process and page index
d177 2
d183 7
a189 1
			sm->rand_fork_time = rand_gen(1000,500000);
d192 2
a193 2

		if (sm->rand_fork_time <= 0 && wait_to_fork == YES) {
d196 1
a209 1
				sm->taken[index] = YES;//update the taken array
d212 4
a215 2
				index = index_open(sm);//picks the free index in taken array
				if(index == -1) {
d217 2
a218 1
				}
a221 8
/*
		/////////////////////////////////////////////////////////////
		////////////////// RUN DAEMON ///////////////////////////////
		/////////////////////////////////////////////////////////////
		if(sm->daemon_flag == RAISE) {
			int amount;
			for(i=0; i<256; i++)
				amount += testBit(sm->bit_vector,i);
a222 17
			if(amount > 231) {
				//Run Daemon
			}
		}

*/

/*
		for(i=0; i<3; i++)  {
			int val;

			val = semctl(semID,i,GETVAL);
			fprintf(stderr,"%d: %d\n",i,val);
		}
*/			

		mr mem_r; //memory reference variable contains proess/page/action
d228 27
a254 2
		for(i=0; i<50; i++) {
			
a263 2
				//pr = sm->reference[i];
				//pg = sm->p[pr].page_addr;
d265 1
a265 1
				sm->p[pr].pg_t[pg].ref_counter = sm->pclock.page_counter; //set the counter for the page
d267 1
d270 2
d283 1
a283 2
					//sleep(1);
					semsignal(semID,pr);
d285 1
d288 11
d300 10
a309 1
		//run_daemon(sm);
d322 3
d328 2
a329 1
				semsignal(semID,process_ref);
d333 2
d345 1
a345 1
fprintf(stderr,"Process: %d| Page: %d | Frame: %d\n",process_ref+1,page_addr_ref,frame);
d348 2
a349 2
				//sleep(1);
				semsignal(semID,process_ref); //signal the referencing process to run again
d351 1
d355 7
a362 1
		sm->rand_fork_time--;
@


1.3
log
@changes in sublime
@
text
@d102 5
a106 3
	for(i=0; i<18; i++) 
		sm->reference[i] = -1; //default 

d108 1
d115 1
d123 1
a123 1
	sm->daemon_flag = DOWN;
d155 3
d163 1
a163 1
	int pr, pg; // process and page_table index
d175 1
a175 1
			if (sm->process_running < 3) {
d193 3
d224 3
d229 2
a230 1
		for(i=0; i<18; i++) {
d232 21
a252 8
			if(sm->reference[i] != -1) {//if there is a process making reference
				pr = sm->reference[i];
				pg = sm->p[pr].page_addr;
				sm->reference[i] = -1; //reset to default

				if(sm->p[pr].pg_t[pg].val_bit == 0) {//if process page is not in frame **page fault
					addToDeviceQ(pr); //adds the process into the device
					//sync_clock(15000,sm); //Simulate Device time
d256 3
a258 3
					//increment 10 nanosecond
					sync_clock(10,sm);
					fprintf(stderr,"process %d page %d already in frame oss signaling %d\n",pr+1,sm->p[pr].page_addr,pr+1);
d265 6
a270 3
		///////// Device Queue //////////
		/////////////////////////////////
		while(isEmpty = isDeviceQEmpty() != YES) {
d272 1
a272 1
			int requestingP;
d274 20
a293 2
			int page_addr = sm->p[requestingP].page_addr;
			int page_action = sm->p[requestingP].page_action;
d295 7
a301 9
			int frame = free_frame(sm);
			sm->p[requestingP].pg_t[page_addr].frame_addr = frame;
			sm->p[requestingP].pg_t[page_addr].val_bit = 1;
fprintf(stderr,"Process: %d| Page: %d | Frame: %d\n",requestingP+1,page_addr,frame);
			setBit(sm->bit_vector, frame);
			//fprintf(stderr,"put in frame signaling %d\n",requestingP);
			//sleep(1);
			semsignal(semID,requestingP);
		}
@


1.2
log
@*** empty log message ***
@
text
@a0 4
/*$Author:$*/
/*$Date:$*/
/*$Log:$*/

d24 1
a24 1
	int i;
d100 12
d119 1
d156 2
a159 8
		
		////////// Sync The Logic Clock ////////////
		////////////////////////////////////////////
		if (sm->lclock.nan >= 999999999) {
			sm->lclock.nan = 0;
			sm->lclock.sec++;
			//fprintf(stderr,"%d second\n",sm->lclock.sec);
		}
d168 1
a168 1
			if (sm->process_running < 18) {
d189 13
d203 1
d205 51
a255 3
		////////////// Looks For Reference Flag /////////////////
		/////////////////////////////////////////////////////////
		
d258 1
a258 1
		sm->lclock.nan++;
@


1.1
log
@Initial revision
@
text
@d5 4
d10 1
d29 3
a31 2

/********* Set up Shared Memory ***********/
d55 3
a57 2
/*********** Set up Semaphore **********/
    int semID;
d70 2
a71 1
/*********** Initialize Semaphores *******/
d75 3
a77 5
/********** Start Logical Clock ***********/
    sm->lclock.sec = 0;
    sm->lclock.nan = 0;	

/********** Initialize bit vectors to 0's ********/
d82 3
a84 1
/****bit vector debuggg		
d100 96
a195 10
******/

/********** Initialize shared Memory *********/







@
